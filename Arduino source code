// Project Title: "Smart Parking System: IoT-Based Car Parking Management"

#include <NewPing.h>
#include <LiquidCrystal_I2C.h>
#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>

// Wi-Fi credentials
char auth[] = "ab1234cd5678ef90gh1234ij5678kl90";
char ssid[] = "Networkcontrol";
char pass[] = "network_wifi_01";

// Pins for ultrasonic sensors
#define trigPin1 2
#define echoPin1 3
#define trigPin2 4
#define echoPin2 5

// Pins for LEDs
#define ledPin1 6
#define ledPin2 7

// Number of parking spots
#define NUM_SPOTS 2

// Maximum distance for parking spot detection (in centimeters)
#define MAX_DISTANCE 50

// Pins for LCD display
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Parking spot status (0 - vacant, 1 - occupied)
int spotStatus[NUM_SPOTS] = {0};

// Initialize ultrasonic sensors
NewPing sonar1(trigPin1, echoPin1, MAX_DISTANCE);
NewPing sonar2(trigPin2, echoPin2, MAX_DISTANCE);

void setup() {
  // Initialize LCD display
  lcd.begin(16, 2);
  lcd.print("Smart Parking");
  lcd.setCursor(0, 1);
  lcd.print("System");

  // Initialize LEDs
  pinMode(ledPin1, OUTPUT);
  pinMode(ledPin2, OUTPUT);

  // Initialize Wi-Fi connection
  WiFi.begin(ssid, pass);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Blynk.config(auth);
  Blynk.connect();

  // Initialize spotStatus array
  for (int i = 0; i < NUM_SPOTS; i++) {
    spotStatus[i] = 0; // Set all spots to vacant initially
  }
}

void loop() {
  // Read ultrasonic sensor values
  int distance1 = sonar1.ping_cm();
  delay(50);
  int distance2 = sonar2.ping_cm();
  delay(50);

  // Update spotStatus based on sensor readings
  if (distance1 < MAX_DISTANCE) {
    spotStatus[0] = 1; // Spot 1 is occupied
    digitalWrite(ledPin1, HIGH); // Turn on LED for Spot 1
  } else {
    spotStatus[0] = 0; // Spot 1 is vacant
    digitalWrite(ledPin1, LOW); // Turn off LED for Spot 1
  }
  if (distance2 < MAX_DISTANCE) {
    spotStatus[1] = 1; // Spot 2 is occupied
    digitalWrite(ledPin2, HIGH); // Turn on LED for Spot 2
  } else {
    spotStatus[1] = 0; // Spot 2 is vacant
    digitalWrite(ledPin2, LOW); // Turn off LED for Spot 2
  }

  // Update LCD display
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Spot 1: ");
  if (spotStatus[0] == 0) {
    lcd.print("Vacant");
  } else {
    lcd.print("Occupied");
  }
  lcd.setCursor(0, 1);
  lcd.print("Spot 2: ");
  if (spotStatus[1] == 0) {
    lcd.print("Vacant");
  } else {
    lcd.print("Occupied");
  }

  // Send parking spot status to Blynk app
  Blynk.run();
  Blynk.virtualWrite(V1, spotStatus[0]);
  Blynk.virtualWrite(V2, spotStatus[1]);

  delay(2000); // Adjust the delay as per your requirements
}
